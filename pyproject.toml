[tool.poetry]
name = "home-assistant-config-validator"
version = "4.3.2"
description = "Custom validator for my Home Assistant configuration"
authors = ["Will Garside <worgarside@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{ include = "home_assistant_config_validator" }]

[tool.poetry.scripts]
generate-readme = "home_assistant_config_validator.readme_generator:main"
validate-entities = "home_assistant_config_validator.validate_entities:main"
validate-lovelace = "home_assistant_config_validator.validate_lovelace:main"

[tool.poetry.dependencies]
python = "^3.12"
jsonpath-ng = "^1.7.0"
pydantic = "^2.11.7"
ruamel-yaml = "^0.18.14"
jinja2 = "^3.1.6"
wg-utilities = { extras = ["logging"], version = "^5.17.1" }

[tool.poetry.group.test.dependencies]
pytest = "^8.3.3"
pytest-codspeed = "^2.2.1"
httpx = "^0.28.1"
pytest-xdist = "^3.6.1"

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

#######################
# Tool Configurations #
#######################

[tool.mypy]
plugins = ["pydantic.mypy"]

check_untyped_defs = true

disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true

explicit_package_bases = true

ignore_missing_imports = false

no_implicit_optional = true
no_implicit_reexport = true

show_column_numbers = true
show_error_codes = true
show_error_context = true

strict = true
strict_equality = true
strict_optional = true

warn_return_any = true
warn_unused_ignores = true
warn_unused_configs = true
warn_redundant_casts = true
warn_no_return = true
warn_unreachable = true

enable_error_code = [
  "arg-type",           # Checks for argument types in function calls.
  "assignment",         # Validates types of variable assignments.
  "return-value",       # Ensures that return values match the declared type.
  "call-overload",      # Validates correct use of method/function overloads.
  "operator",           # Checks operator usage against expected types.
  "index",              # Validates types used in indexing operations.
  "attr-defined",       # Checks if attributes exist in classes/objects.
  "no-untyped-call",    # Prevents calls to untyped functions in typed contexts.
  "unreachable",        # Warns about code that can never be executed.
  "truthy-bool",        # Ensures that boolean expressions are boolean in type.
  "union-attr",         # Checks for attribute access in unions safely.
  "dict-item",          # Checks for proper types used in dictionary items.
  "unused-awaitable",   # Warns if an awaitable is not awaited.
  "override",           # Ensures overridden methods match the signature in base class.
  "list-item",          # Checks type consistency of list items.
  "return",             # Ensures all code paths in a function return a value if needed.
  "type-var",           # Ensures type variables are used correctly.
  "valid-type",         # Validates types used in annotations are recognized.
  "func-returns-value", # Ensures functions declared with a return type actually return a value.
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.codespell]
ignore-words-list = "iif"
skip = '*.json,*.csv,*.xml,*.lock'

[tool.pycln]
path = "*"
expand_stars = true
all = true
no_gitignore = false

[tool.ruff]
fix = true
line-length = 95
lint.select = [
  "A",    # https://docs.astral.sh/ruff/rules/#flake8-builtins-a
  "ARG",  # https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
  "B",    # https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
  "C4",   # https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
  "COM",  # https://docs.astral.sh/ruff/rules/#flake8-commas-com
  "D",    # https://docs.astral.sh/ruff/rules/#pydocstyle-d
  "E",    # https://docs.astral.sh/ruff/rules/#error-e
  "ERA",  # https://docs.astral.sh/ruff/rules/#eradicate-era
  "F",    # https://docs.astral.sh/ruff/rules/#pyflakes-f
  "FA",   # https://docs.astral.sh/ruff/rules/#flake8-future-annotations-fa
  "FBT",  # https://docs.astral.sh/ruff/rules/#flake8-boolean-trap-fbt
  "FLY",  # https://docs.astral.sh/ruff/rules/#flynt-fly
  "FURB", # https://docs.astral.sh/ruff/rules/#refurb-furb
  "G",    # https://docs.astral.sh/ruff/rules/#flake8-logging-format-g
  "I",    # https://docs.astral.sh/ruff/rules/#isort-i
  "ICN",  # https://docs.astral.sh/ruff/rules/#flake8-import-conventions-icn
  "INT",  # https://docs.astral.sh/ruff/rules/#flake8-gettext-int
  "ISC",  # https://docs.astral.sh/ruff/rules/#flake8-implicit-str-concat-isc
  "LOG",  # https://docs.astral.sh/ruff/rules/#flake8-logging-log
  "N",    # https://docs.astral.sh/ruff/rules/#pep8-naming-n
  "PERF", # https://docs.astral.sh/ruff/rules/#perflint-perf
  "PGH",  # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
  "PIE",  # https://docs.astral.sh/ruff/rules/#flake8-pie-pie
  "PL",   # https://docs.astral.sh/ruff/rules/#pylint-pl
  "PGH",  # https://docs.astral.sh/ruff/rules/#pygrep-hooks-pgh
  "PT",   # https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
  "PTH",  # https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
  "Q",    # https://docs.astral.sh/ruff/rules/#flake8-quotes-q
  "RET",  # https://docs.astral.sh/ruff/rules/#flake8-return-ret
  "RSE",  # https://docs.astral.sh/ruff/rules/#flake8-raise-rse
  "RUF",  # https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
  "S",    # https://docs.astral.sh/ruff/rules/#flake8-bandit-s
  "SIM",  # https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
  "TCH",  # https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
  "TID",  # https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
  "TRIO", # https://docs.astral.sh/ruff/rules/#flake8-trio-trio
  "TRY",  # https://docs.astral.sh/ruff/rules/#tryceratops-try
  "UP",   # https://docs.astral.sh/ruff/rules/#pyupgrade-up
  "W",    # https://docs.astral.sh/ruff/rules/#warning-w
]
lint.ignore = [
  "ISC001", # https://docs.astral.sh/ruff/rules/single-line-implicit-string-concatenation/
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["D104"]
"exception.py" = ["D107"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 6

[tool.ruff.lint.isort]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pycodestyle]
max-line-length = 115

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.vulture]
min_confidence = 70
paths = ["home_assistant_config_validator"]
sort_by_size = true

[tool.pytest.ini_options]
addopts = ["-n", "auto", "-vvv"]
